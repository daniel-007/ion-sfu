// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cmd/server/grpc/proto/sfu.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PublishRequest struct {
	Rid string `protobuf:"bytes,1,opt,name=rid,proto3" json:"rid,omitempty"`
	// Types that are valid to be assigned to Payload:
	//	*PublishRequest_Connect
	//	*PublishRequest_Trickle
	Payload              isPublishRequest_Payload `protobuf_oneof:"payload"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *PublishRequest) Reset()         { *m = PublishRequest{} }
func (m *PublishRequest) String() string { return proto.CompactTextString(m) }
func (*PublishRequest) ProtoMessage()    {}
func (*PublishRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca80ff2c9b7a4e60, []int{0}
}

func (m *PublishRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishRequest.Unmarshal(m, b)
}
func (m *PublishRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishRequest.Marshal(b, m, deterministic)
}
func (m *PublishRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishRequest.Merge(m, src)
}
func (m *PublishRequest) XXX_Size() int {
	return xxx_messageInfo_PublishRequest.Size(m)
}
func (m *PublishRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PublishRequest proto.InternalMessageInfo

func (m *PublishRequest) GetRid() string {
	if m != nil {
		return m.Rid
	}
	return ""
}

type isPublishRequest_Payload interface {
	isPublishRequest_Payload()
}

type PublishRequest_Connect struct {
	Connect *Connect `protobuf:"bytes,2,opt,name=connect,proto3,oneof"`
}

type PublishRequest_Trickle struct {
	Trickle *Trickle `protobuf:"bytes,3,opt,name=trickle,proto3,oneof"`
}

func (*PublishRequest_Connect) isPublishRequest_Payload() {}

func (*PublishRequest_Trickle) isPublishRequest_Payload() {}

func (m *PublishRequest) GetPayload() isPublishRequest_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *PublishRequest) GetConnect() *Connect {
	if x, ok := m.GetPayload().(*PublishRequest_Connect); ok {
		return x.Connect
	}
	return nil
}

func (m *PublishRequest) GetTrickle() *Trickle {
	if x, ok := m.GetPayload().(*PublishRequest_Trickle); ok {
		return x.Trickle
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PublishRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PublishRequest_Connect)(nil),
		(*PublishRequest_Trickle)(nil),
	}
}

type PublishReply struct {
	Mid string `protobuf:"bytes,1,opt,name=mid,proto3" json:"mid,omitempty"`
	// Types that are valid to be assigned to Payload:
	//	*PublishReply_Connect
	//	*PublishReply_Trickle
	Payload              isPublishReply_Payload `protobuf_oneof:"payload"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *PublishReply) Reset()         { *m = PublishReply{} }
func (m *PublishReply) String() string { return proto.CompactTextString(m) }
func (*PublishReply) ProtoMessage()    {}
func (*PublishReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca80ff2c9b7a4e60, []int{1}
}

func (m *PublishReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishReply.Unmarshal(m, b)
}
func (m *PublishReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishReply.Marshal(b, m, deterministic)
}
func (m *PublishReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishReply.Merge(m, src)
}
func (m *PublishReply) XXX_Size() int {
	return xxx_messageInfo_PublishReply.Size(m)
}
func (m *PublishReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishReply.DiscardUnknown(m)
}

var xxx_messageInfo_PublishReply proto.InternalMessageInfo

func (m *PublishReply) GetMid() string {
	if m != nil {
		return m.Mid
	}
	return ""
}

type isPublishReply_Payload interface {
	isPublishReply_Payload()
}

type PublishReply_Connect struct {
	Connect *Connect `protobuf:"bytes,2,opt,name=connect,proto3,oneof"`
}

type PublishReply_Trickle struct {
	Trickle *Trickle `protobuf:"bytes,3,opt,name=trickle,proto3,oneof"`
}

func (*PublishReply_Connect) isPublishReply_Payload() {}

func (*PublishReply_Trickle) isPublishReply_Payload() {}

func (m *PublishReply) GetPayload() isPublishReply_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *PublishReply) GetConnect() *Connect {
	if x, ok := m.GetPayload().(*PublishReply_Connect); ok {
		return x.Connect
	}
	return nil
}

func (m *PublishReply) GetTrickle() *Trickle {
	if x, ok := m.GetPayload().(*PublishReply_Trickle); ok {
		return x.Trickle
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PublishReply) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PublishReply_Connect)(nil),
		(*PublishReply_Trickle)(nil),
	}
}

type SubscribeRequest struct {
	Mid string `protobuf:"bytes,1,opt,name=mid,proto3" json:"mid,omitempty"`
	// Types that are valid to be assigned to Payload:
	//	*SubscribeRequest_Connect
	//	*SubscribeRequest_Trickle
	Payload              isSubscribeRequest_Payload `protobuf_oneof:"payload"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *SubscribeRequest) Reset()         { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()    {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca80ff2c9b7a4e60, []int{2}
}

func (m *SubscribeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeRequest.Unmarshal(m, b)
}
func (m *SubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeRequest.Marshal(b, m, deterministic)
}
func (m *SubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeRequest.Merge(m, src)
}
func (m *SubscribeRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeRequest.Size(m)
}
func (m *SubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeRequest proto.InternalMessageInfo

func (m *SubscribeRequest) GetMid() string {
	if m != nil {
		return m.Mid
	}
	return ""
}

type isSubscribeRequest_Payload interface {
	isSubscribeRequest_Payload()
}

type SubscribeRequest_Connect struct {
	Connect *Connect `protobuf:"bytes,2,opt,name=connect,proto3,oneof"`
}

type SubscribeRequest_Trickle struct {
	Trickle *Trickle `protobuf:"bytes,3,opt,name=trickle,proto3,oneof"`
}

func (*SubscribeRequest_Connect) isSubscribeRequest_Payload() {}

func (*SubscribeRequest_Trickle) isSubscribeRequest_Payload() {}

func (m *SubscribeRequest) GetPayload() isSubscribeRequest_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *SubscribeRequest) GetConnect() *Connect {
	if x, ok := m.GetPayload().(*SubscribeRequest_Connect); ok {
		return x.Connect
	}
	return nil
}

func (m *SubscribeRequest) GetTrickle() *Trickle {
	if x, ok := m.GetPayload().(*SubscribeRequest_Trickle); ok {
		return x.Trickle
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SubscribeRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SubscribeRequest_Connect)(nil),
		(*SubscribeRequest_Trickle)(nil),
	}
}

type SubscribeReply struct {
	Mid string `protobuf:"bytes,1,opt,name=mid,proto3" json:"mid,omitempty"`
	// Types that are valid to be assigned to Payload:
	//	*SubscribeReply_Connect
	//	*SubscribeReply_Trickle
	Payload              isSubscribeReply_Payload `protobuf_oneof:"payload"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *SubscribeReply) Reset()         { *m = SubscribeReply{} }
func (m *SubscribeReply) String() string { return proto.CompactTextString(m) }
func (*SubscribeReply) ProtoMessage()    {}
func (*SubscribeReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca80ff2c9b7a4e60, []int{3}
}

func (m *SubscribeReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeReply.Unmarshal(m, b)
}
func (m *SubscribeReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeReply.Marshal(b, m, deterministic)
}
func (m *SubscribeReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeReply.Merge(m, src)
}
func (m *SubscribeReply) XXX_Size() int {
	return xxx_messageInfo_SubscribeReply.Size(m)
}
func (m *SubscribeReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeReply.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeReply proto.InternalMessageInfo

func (m *SubscribeReply) GetMid() string {
	if m != nil {
		return m.Mid
	}
	return ""
}

type isSubscribeReply_Payload interface {
	isSubscribeReply_Payload()
}

type SubscribeReply_Connect struct {
	Connect *Connect `protobuf:"bytes,2,opt,name=connect,proto3,oneof"`
}

type SubscribeReply_Trickle struct {
	Trickle *Trickle `protobuf:"bytes,3,opt,name=trickle,proto3,oneof"`
}

func (*SubscribeReply_Connect) isSubscribeReply_Payload() {}

func (*SubscribeReply_Trickle) isSubscribeReply_Payload() {}

func (m *SubscribeReply) GetPayload() isSubscribeReply_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *SubscribeReply) GetConnect() *Connect {
	if x, ok := m.GetPayload().(*SubscribeReply_Connect); ok {
		return x.Connect
	}
	return nil
}

func (m *SubscribeReply) GetTrickle() *Trickle {
	if x, ok := m.GetPayload().(*SubscribeReply_Trickle); ok {
		return x.Trickle
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SubscribeReply) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SubscribeReply_Connect)(nil),
		(*SubscribeReply_Trickle)(nil),
	}
}

type Connect struct {
	Description          *SessionDescription `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	Options              *Options            `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Connect) Reset()         { *m = Connect{} }
func (m *Connect) String() string { return proto.CompactTextString(m) }
func (*Connect) ProtoMessage()    {}
func (*Connect) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca80ff2c9b7a4e60, []int{4}
}

func (m *Connect) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Connect.Unmarshal(m, b)
}
func (m *Connect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Connect.Marshal(b, m, deterministic)
}
func (m *Connect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Connect.Merge(m, src)
}
func (m *Connect) XXX_Size() int {
	return xxx_messageInfo_Connect.Size(m)
}
func (m *Connect) XXX_DiscardUnknown() {
	xxx_messageInfo_Connect.DiscardUnknown(m)
}

var xxx_messageInfo_Connect proto.InternalMessageInfo

func (m *Connect) GetDescription() *SessionDescription {
	if m != nil {
		return m.Description
	}
	return nil
}

func (m *Connect) GetOptions() *Options {
	if m != nil {
		return m.Options
	}
	return nil
}

type Trickle struct {
	Candidate            string   `protobuf:"bytes,1,opt,name=candidate,proto3" json:"candidate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Trickle) Reset()         { *m = Trickle{} }
func (m *Trickle) String() string { return proto.CompactTextString(m) }
func (*Trickle) ProtoMessage()    {}
func (*Trickle) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca80ff2c9b7a4e60, []int{5}
}

func (m *Trickle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Trickle.Unmarshal(m, b)
}
func (m *Trickle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Trickle.Marshal(b, m, deterministic)
}
func (m *Trickle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Trickle.Merge(m, src)
}
func (m *Trickle) XXX_Size() int {
	return xxx_messageInfo_Trickle.Size(m)
}
func (m *Trickle) XXX_DiscardUnknown() {
	xxx_messageInfo_Trickle.DiscardUnknown(m)
}

var xxx_messageInfo_Trickle proto.InternalMessageInfo

func (m *Trickle) GetCandidate() string {
	if m != nil {
		return m.Candidate
	}
	return ""
}

type SessionDescription struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Sdp                  []byte   `protobuf:"bytes,2,opt,name=sdp,proto3" json:"sdp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SessionDescription) Reset()         { *m = SessionDescription{} }
func (m *SessionDescription) String() string { return proto.CompactTextString(m) }
func (*SessionDescription) ProtoMessage()    {}
func (*SessionDescription) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca80ff2c9b7a4e60, []int{6}
}

func (m *SessionDescription) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SessionDescription.Unmarshal(m, b)
}
func (m *SessionDescription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SessionDescription.Marshal(b, m, deterministic)
}
func (m *SessionDescription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionDescription.Merge(m, src)
}
func (m *SessionDescription) XXX_Size() int {
	return xxx_messageInfo_SessionDescription.Size(m)
}
func (m *SessionDescription) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionDescription.DiscardUnknown(m)
}

var xxx_messageInfo_SessionDescription proto.InternalMessageInfo

func (m *SessionDescription) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *SessionDescription) GetSdp() []byte {
	if m != nil {
		return m.Sdp
	}
	return nil
}

type Options struct {
	Bandwidth            uint32   `protobuf:"varint,1,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
	Transportcc          bool     `protobuf:"varint,2,opt,name=transportcc,proto3" json:"transportcc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Options) Reset()         { *m = Options{} }
func (m *Options) String() string { return proto.CompactTextString(m) }
func (*Options) ProtoMessage()    {}
func (*Options) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca80ff2c9b7a4e60, []int{7}
}

func (m *Options) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Options.Unmarshal(m, b)
}
func (m *Options) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Options.Marshal(b, m, deterministic)
}
func (m *Options) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Options.Merge(m, src)
}
func (m *Options) XXX_Size() int {
	return xxx_messageInfo_Options.Size(m)
}
func (m *Options) XXX_DiscardUnknown() {
	xxx_messageInfo_Options.DiscardUnknown(m)
}

var xxx_messageInfo_Options proto.InternalMessageInfo

func (m *Options) GetBandwidth() uint32 {
	if m != nil {
		return m.Bandwidth
	}
	return 0
}

func (m *Options) GetTransportcc() bool {
	if m != nil {
		return m.Transportcc
	}
	return false
}

func init() {
	proto.RegisterType((*PublishRequest)(nil), "sfu.PublishRequest")
	proto.RegisterType((*PublishReply)(nil), "sfu.PublishReply")
	proto.RegisterType((*SubscribeRequest)(nil), "sfu.SubscribeRequest")
	proto.RegisterType((*SubscribeReply)(nil), "sfu.SubscribeReply")
	proto.RegisterType((*Connect)(nil), "sfu.Connect")
	proto.RegisterType((*Trickle)(nil), "sfu.Trickle")
	proto.RegisterType((*SessionDescription)(nil), "sfu.SessionDescription")
	proto.RegisterType((*Options)(nil), "sfu.Options")
}

func init() { proto.RegisterFile("cmd/server/grpc/proto/sfu.proto", fileDescriptor_ca80ff2c9b7a4e60) }

var fileDescriptor_ca80ff2c9b7a4e60 = []byte{
	// 412 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x93, 0xc1, 0x8b, 0xd4, 0x30,
	0x14, 0xc6, 0xb7, 0x56, 0xac, 0x7d, 0x1d, 0x65, 0xcd, 0x22, 0x0e, 0x8b, 0xe0, 0xd0, 0x83, 0xf6,
	0xb2, 0x13, 0x19, 0x0f, 0xa2, 0xe0, 0x65, 0x15, 0xd1, 0x93, 0x92, 0xd1, 0x8b, 0xb7, 0x36, 0xc9,
	0xec, 0x04, 0xdb, 0x24, 0x26, 0xa9, 0xd2, 0x83, 0x88, 0xf8, 0x8f, 0x4b, 0xd2, 0xce, 0xb4, 0xb3,
	0x7a, 0xd5, 0x3d, 0xe5, 0xf1, 0xbd, 0x2f, 0xef, 0xfd, 0xf2, 0x92, 0xc0, 0x03, 0xda, 0x30, 0x6c,
	0xb9, 0xf9, 0xca, 0x0d, 0xbe, 0x30, 0x9a, 0x62, 0x6d, 0x94, 0x53, 0xd8, 0x6e, 0xda, 0x65, 0x88,
	0x50, 0x6c, 0x37, 0x6d, 0xfe, 0x33, 0x82, 0xdb, 0xef, 0xdb, 0xaa, 0x16, 0x76, 0x4b, 0xf8, 0x97,
	0x96, 0x5b, 0x87, 0x8e, 0x21, 0x36, 0x82, 0xcd, 0xa3, 0x45, 0x54, 0xa4, 0xc4, 0x87, 0xa8, 0x80,
	0x84, 0x2a, 0x29, 0x39, 0x75, 0xf3, 0x6b, 0x8b, 0xa8, 0xc8, 0x56, 0xb3, 0xa5, 0x2f, 0xf3, 0xb2,
	0xd7, 0xde, 0x1c, 0x91, 0x5d, 0xda, 0x3b, 0x9d, 0x11, 0xf4, 0x73, 0xcd, 0xe7, 0xf1, 0xc4, 0xf9,
	0xa1, 0xd7, 0xbc, 0x73, 0x48, 0x9f, 0xa7, 0x90, 0xe8, 0xb2, 0xab, 0x55, 0xc9, 0xf2, 0x1f, 0x30,
	0xdb, 0x23, 0xe8, 0xba, 0xf3, 0x00, 0xcd, 0x08, 0xd0, 0xfc, 0x7b, 0x80, 0x5f, 0x11, 0x1c, 0xaf,
	0xdb, 0xca, 0x52, 0x23, 0x2a, 0x3e, 0x19, 0xc3, 0xff, 0xa5, 0xf0, 0x57, 0x31, 0xa1, 0xb8, 0x92,
	0x49, 0xd4, 0x90, 0x0c, 0xa5, 0xd0, 0x33, 0xc8, 0x18, 0xf7, 0x30, 0xda, 0x09, 0x25, 0x03, 0x43,
	0xb6, 0xba, 0x17, 0x6a, 0xac, 0xb9, 0xb5, 0x42, 0xc9, 0x57, 0x63, 0x9a, 0x4c, 0xbd, 0xe8, 0x21,
	0x24, 0x2a, 0x44, 0xf6, 0x00, 0xf2, 0x5d, 0xaf, 0x91, 0x5d, 0x32, 0x7f, 0x04, 0xc9, 0x80, 0x83,
	0xee, 0x43, 0x4a, 0x4b, 0xc9, 0x04, 0x2b, 0x1d, 0x1f, 0xce, 0x3b, 0x0a, 0xf9, 0x73, 0x40, 0x7f,
	0xf6, 0x44, 0x08, 0xae, 0xbb, 0x4e, 0xef, 0xec, 0x21, 0xf6, 0x13, 0xb3, 0x4c, 0x87, 0xb6, 0x33,
	0xe2, 0xc3, 0xfc, 0x2d, 0x24, 0x43, 0x63, 0xdf, 0xa4, 0x2a, 0x25, 0xfb, 0x26, 0x98, 0xdb, 0x86,
	0x5d, 0xb7, 0xc8, 0x28, 0xa0, 0x05, 0x64, 0xce, 0x94, 0xd2, 0x6a, 0x65, 0x1c, 0xa5, 0xa1, 0xc4,
	0x4d, 0x32, 0x95, 0x56, 0xdf, 0x21, 0x5e, 0xbf, 0xfe, 0x88, 0x9e, 0x42, 0x32, 0xbc, 0x57, 0x74,
	0x12, 0x0e, 0x76, 0xf8, 0x81, 0x4e, 0xef, 0x1c, 0x8a, 0xba, 0xee, 0xf2, 0xa3, 0x22, 0x7a, 0x1c,
	0xa1, 0x17, 0x90, 0xee, 0x2f, 0x18, 0xdd, 0xed, 0x47, 0x79, 0xe9, 0xd9, 0x9d, 0x9e, 0x5c, 0x96,
	0xf7, 0xdb, 0xcf, 0xf1, 0xa7, 0xb3, 0x0b, 0xe1, 0xb6, 0x6d, 0xb5, 0xa4, 0xaa, 0xc1, 0x5a, 0x28,
	0x89, 0x85, 0x92, 0x67, 0x76, 0xd3, 0xe2, 0xbf, 0xfe, 0xf5, 0xea, 0x46, 0x58, 0x9e, 0xfc, 0x0e,
	0x00, 0x00, 0xff, 0xff, 0x52, 0x81, 0xb7, 0xdc, 0x0b, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SFUClient is the client API for SFU service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SFUClient interface {
	Publish(ctx context.Context, opts ...grpc.CallOption) (SFU_PublishClient, error)
	Subscribe(ctx context.Context, opts ...grpc.CallOption) (SFU_SubscribeClient, error)
}

type sFUClient struct {
	cc *grpc.ClientConn
}

func NewSFUClient(cc *grpc.ClientConn) SFUClient {
	return &sFUClient{cc}
}

func (c *sFUClient) Publish(ctx context.Context, opts ...grpc.CallOption) (SFU_PublishClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SFU_serviceDesc.Streams[0], "/sfu.SFU/Publish", opts...)
	if err != nil {
		return nil, err
	}
	x := &sFUPublishClient{stream}
	return x, nil
}

type SFU_PublishClient interface {
	Send(*PublishRequest) error
	Recv() (*PublishReply, error)
	grpc.ClientStream
}

type sFUPublishClient struct {
	grpc.ClientStream
}

func (x *sFUPublishClient) Send(m *PublishRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sFUPublishClient) Recv() (*PublishReply, error) {
	m := new(PublishReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sFUClient) Subscribe(ctx context.Context, opts ...grpc.CallOption) (SFU_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SFU_serviceDesc.Streams[1], "/sfu.SFU/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &sFUSubscribeClient{stream}
	return x, nil
}

type SFU_SubscribeClient interface {
	Send(*SubscribeRequest) error
	Recv() (*SubscribeReply, error)
	grpc.ClientStream
}

type sFUSubscribeClient struct {
	grpc.ClientStream
}

func (x *sFUSubscribeClient) Send(m *SubscribeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sFUSubscribeClient) Recv() (*SubscribeReply, error) {
	m := new(SubscribeReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SFUServer is the server API for SFU service.
type SFUServer interface {
	Publish(SFU_PublishServer) error
	Subscribe(SFU_SubscribeServer) error
}

// UnimplementedSFUServer can be embedded to have forward compatible implementations.
type UnimplementedSFUServer struct {
}

func (*UnimplementedSFUServer) Publish(srv SFU_PublishServer) error {
	return status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (*UnimplementedSFUServer) Subscribe(srv SFU_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}

func RegisterSFUServer(s *grpc.Server, srv SFUServer) {
	s.RegisterService(&_SFU_serviceDesc, srv)
}

func _SFU_Publish_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SFUServer).Publish(&sFUPublishServer{stream})
}

type SFU_PublishServer interface {
	Send(*PublishReply) error
	Recv() (*PublishRequest, error)
	grpc.ServerStream
}

type sFUPublishServer struct {
	grpc.ServerStream
}

func (x *sFUPublishServer) Send(m *PublishReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sFUPublishServer) Recv() (*PublishRequest, error) {
	m := new(PublishRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SFU_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SFUServer).Subscribe(&sFUSubscribeServer{stream})
}

type SFU_SubscribeServer interface {
	Send(*SubscribeReply) error
	Recv() (*SubscribeRequest, error)
	grpc.ServerStream
}

type sFUSubscribeServer struct {
	grpc.ServerStream
}

func (x *sFUSubscribeServer) Send(m *SubscribeReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sFUSubscribeServer) Recv() (*SubscribeRequest, error) {
	m := new(SubscribeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _SFU_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sfu.SFU",
	HandlerType: (*SFUServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Publish",
			Handler:       _SFU_Publish_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _SFU_Subscribe_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "cmd/server/grpc/proto/sfu.proto",
}
